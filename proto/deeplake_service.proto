syntax = "proto3";

package deeplake.v1;

option go_package = "github.com/yourorg/deeplake-vector-service/proto/deeplake/v1;deeplakev1";

import "google/protobuf/timestamp.proto";

// Dataset Management Service
service DatasetService {
  rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse);
  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse);
  rpc ListDatasets(ListDatasetsRequest) returns (ListDatasetsResponse);
  rpc UpdateDataset(UpdateDatasetRequest) returns (UpdateDatasetResponse);
  rpc DeleteDataset(DeleteDatasetRequest) returns (DeleteDatasetResponse);
  rpc GetDatasetStats(GetDatasetStatsRequest) returns (GetDatasetStatsResponse);
}

// Vector Operations Service
service VectorService {
  rpc InsertVector(InsertVectorRequest) returns (InsertVectorResponse);
  rpc InsertVectors(InsertVectorsRequest) returns (InsertVectorsResponse);
  rpc GetVector(GetVectorRequest) returns (GetVectorResponse);
  rpc UpdateVector(UpdateVectorRequest) returns (UpdateVectorResponse);
  rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);
  rpc ListVectors(ListVectorsRequest) returns (ListVectorsResponse);
}

// Search Service
service SearchService {
  rpc SearchVectors(SearchVectorsRequest) returns (SearchVectorsResponse);
  rpc SearchByText(SearchByTextRequest) returns (SearchByTextResponse);
  rpc HybridSearch(HybridSearchRequest) returns (HybridSearchResponse);
}

// Health Service
service HealthService {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

// Common message types
message Dataset {
  string id = 1;
  string name = 2;
  string description = 3;
  int32 dimensions = 4;
  string metric_type = 5;
  string index_type = 6;
  map<string, string> metadata = 7;
  string storage_location = 8;
  int64 vector_count = 9;
  int64 storage_size = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  string tenant_id = 13;
}

message Vector {
  string id = 1;
  string dataset_id = 2;
  string document_id = 3;
  string chunk_id = 4;
  repeated float values = 5;
  string content = 6;
  string content_hash = 7;
  map<string, string> metadata = 8;
  string content_type = 9;
  string language = 10;
  int32 chunk_index = 11;
  int32 chunk_count = 12;
  string model = 13;
  int32 dimensions = 14;
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  string tenant_id = 17;
}

message SearchResult {
  Vector vector = 1;
  float score = 2;
  float distance = 3;
  int32 rank = 4;
  map<string, string> explanation = 5;
}

message SearchOptions {
  int32 top_k = 1;
  float threshold = 2;
  string metric_type = 3;
  bool include_content = 4;
  bool include_metadata = 5;
  map<string, string> filters = 6;
  bool deduplicate = 7;
  bool group_by_document = 8;
  bool rerank = 9;
  int32 ef_search = 10;
  int32 nprobe = 11;
  float max_distance = 12;
  float min_score = 13;
}

message SearchStats {
  int64 vectors_scanned = 1;
  int64 index_hits = 2;
  int64 filtered_results = 3;
  double reranking_time_ms = 4;
  double database_time_ms = 5;
  double post_processing_time_ms = 6;
}

// Dataset requests/responses
message CreateDatasetRequest {
  string name = 1;
  string description = 2;
  int32 dimensions = 3;
  string metric_type = 4;
  string index_type = 5;
  map<string, string> metadata = 6;
  string storage_location = 7;
  bool overwrite = 8;
  string tenant_id = 9;
}

message CreateDatasetResponse {
  Dataset dataset = 1;
  string message = 2;
}

message GetDatasetRequest {
  string dataset_id = 1;
  string tenant_id = 2;
}

message GetDatasetResponse {
  Dataset dataset = 1;
}

message ListDatasetsRequest {
  string tenant_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListDatasetsResponse {
  repeated Dataset datasets = 1;
  int32 total_count = 2;
}

message UpdateDatasetRequest {
  string dataset_id = 1;
  string name = 2;
  string description = 3;
  map<string, string> metadata = 4;
  string tenant_id = 5;
}

message UpdateDatasetResponse {
  Dataset dataset = 1;
  string message = 2;
}

message DeleteDatasetRequest {
  string dataset_id = 1;
  string tenant_id = 2;
}

message DeleteDatasetResponse {
  string message = 1;
}

message GetDatasetStatsRequest {
  string dataset_id = 1;
  string tenant_id = 2;
}

message GetDatasetStatsResponse {
  Dataset dataset = 1;
  int64 vector_count = 2;
  int64 storage_size = 3;
  map<string, int64> metadata_stats = 4;
}

// Vector requests/responses
message InsertVectorRequest {
  string dataset_id = 1;
  Vector vector = 2;
  bool skip_existing = 3;
  bool overwrite = 4;
  string tenant_id = 5;
}

message InsertVectorResponse {
  string vector_id = 1;
  string message = 2;
}

message InsertVectorsRequest {
  string dataset_id = 1;
  repeated Vector vectors = 2;
  bool skip_existing = 3;
  bool overwrite = 4;
  int32 batch_size = 5;
  string tenant_id = 6;
}

message InsertVectorsResponse {
  int32 inserted_count = 1;
  int32 skipped_count = 2;
  int32 failed_count = 3;
  repeated string error_messages = 4;
  double processing_time_ms = 5;
}

message GetVectorRequest {
  string dataset_id = 1;
  string vector_id = 2;
  string tenant_id = 3;
}

message GetVectorResponse {
  Vector vector = 1;
}

message UpdateVectorRequest {
  string dataset_id = 1;
  string vector_id = 2;
  Vector vector = 3;
  string tenant_id = 4;
}

message UpdateVectorResponse {
  Vector vector = 1;
  string message = 2;
}

message DeleteVectorRequest {
  string dataset_id = 1;
  string vector_id = 2;
  string tenant_id = 3;
}

message DeleteVectorResponse {
  string message = 1;
}

message ListVectorsRequest {
  string dataset_id = 1;
  string tenant_id = 2;
  int32 limit = 3;
  int32 offset = 4;
  map<string, string> filters = 5;
}

message ListVectorsResponse {
  repeated Vector vectors = 1;
  int32 total_count = 2;
}

// Search requests/responses
message SearchVectorsRequest {
  string dataset_id = 1;
  repeated float query_vector = 2;
  SearchOptions options = 3;
  string tenant_id = 4;
}

message SearchVectorsResponse {
  repeated SearchResult results = 1;
  int32 total_found = 2;
  bool has_more = 3;
  double query_time_ms = 4;
  SearchStats stats = 5;
}

message SearchByTextRequest {
  string dataset_id = 1;
  string query_text = 2;
  SearchOptions options = 3;
  string tenant_id = 4;
}

message SearchByTextResponse {
  repeated SearchResult results = 1;
  int32 total_found = 2;
  bool has_more = 3;
  double query_time_ms = 4;
  double embedding_time_ms = 5;
  SearchStats stats = 6;
}

message HybridSearchRequest {
  string dataset_id = 1;
  repeated float query_vector = 2;
  string query_text = 3;
  SearchOptions options = 4;
  float vector_weight = 5;
  float text_weight = 6;
  string tenant_id = 7;
}

message HybridSearchResponse {
  repeated SearchResult results = 1;
  int32 total_found = 2;
  bool has_more = 3;
  double query_time_ms = 4;
  double embedding_time_ms = 5;
  SearchStats stats = 6;
}

// Health requests/responses
message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
  string service = 2;
  string version = 3;
  google.protobuf.Timestamp timestamp = 4;
  map<string, string> dependencies = 5;
}

message GetMetricsRequest {}

message GetMetricsResponse {
  map<string, double> metrics = 1;
  google.protobuf.Timestamp timestamp = 2;
}