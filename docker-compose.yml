version: '3.8'

services:
  deeplake-service:
    build: .
    ports:
      - "8000:8000"    # HTTP
      - "50051:50051"  # gRPC
    environment:
      # Deep Lake Configuration
      - DEEPLAKE_STORAGE_LOCATION=/app/data/vectors
      - DEEPLAKE_TOKEN=${DEEPLAKE_TOKEN:-}
      - DEEPLAKE_ORG_ID=${DEEPLAKE_ORG_ID:-}

      # HTTP Server Configuration  
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8000
      - HTTP_WORKERS=1

      # gRPC Server Configuration
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - GRPC_MAX_WORKERS=10

      # Authentication (REQUIRED)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_HOURS=24

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_TTL_SECONDS=3600

      # Monitoring
      - MONITORING_ENABLE_METRICS=true
      - MONITORING_METRICS_PORT=9090
      - MONITORING_LOG_LEVEL=INFO
      - MONITORING_LOG_FORMAT=json

      # Performance
      - PERFORMANCE_MAX_VECTOR_BATCH_SIZE=1000
      - PERFORMANCE_DEFAULT_SEARCH_TIMEOUT=30
      - PERFORMANCE_MAX_CONCURRENT_SEARCHES=50

      # Development
      - DEV_DEBUG=false
      - DEV_RELOAD=false
      - DEV_CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
    volumes:
      - ./data:/data
      - ./logs:/app/logs
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - deeplake-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - deeplake-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./deployment/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - deeplake-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards/deeplake
    restart: unless-stopped
    networks:
      - deeplake-network

  # Alertmanager for alert routing and notifications
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./deployment/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    restart: unless-stopped
    networks:
      - deeplake-network

  # Monitoring Dashboard - HTML server with Markdown rendering
  monitoring-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    restart: unless-stopped
    networks:
      - deeplake-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  deeplake-network:
    driver: bridge